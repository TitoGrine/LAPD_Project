buildscript {
    ext.kotlinVersion = '1.4.10'
    ext.coroutinesVersion = '1.3.7'
    ext.protobufPlugInVersion = '0.8.12'
    ext.protobufVersion = '3.12.2'
    ext.grpcVersion = '1.29.0'
    ext.grpcKotlinVersion = '0.1.3'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobufPlugInVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.30'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.30'
    id "com.google.protobuf" version "0.8.15"
    id 'application'

    id 'idea'
}

group 'org.feup.lapd.middleware'
version '1.0-SNAPSHOT'
def ktor_version = '1.5.2'
def arrow_version = "0.13.1"
def protobufVersion = '3.12.2'
def grpcVersion = '1.29.0'
def grpcKotlinVersion = '0.1.3'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.30"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "io.ktor:ktor-serialization:$ktor_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.1.0"
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.15.6'
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "io.arrow-kt:arrow-core:$arrow_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.4.3'
    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j.jsonrpc:0.12.0"

    implementation "com.google.protobuf:protobuf-java:$protobufVersion"
    implementation "com.google.protobuf:protobuf-java-util:$protobufVersion"
    implementation "io.grpc:grpc-netty-shaded:$grpcVersion"
    implementation "io.grpc:grpc-protobuf:$grpcVersion"
    implementation "io.grpc:grpc-stub:$grpcVersion"
    implementation "io.grpc:grpc-kotlin-stub:$grpcKotlinVersion"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:1.7.0'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }

        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:$grpcKotlinVersion"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                // Generate Java gRPC classes
                grpc { }
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt { }
            }
        }
    }
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/java")
        sourceDirs += file("${projectDir}/src/generated/grpc")
        sourceDirs += file("${projectDir}/src/generated/grpckt")
    }
}

test {
    useJUnitPlatform()
}

task startGRPCServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.grpc.server.ServerLauncher'
    args '3000'
    standardInput = System.in
}

task startGRPCClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.grpc.client.ClientLauncher'
    args 'localhost', '3000'
    standardInput = System.in
}

task startJRPCServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.jrpc.server.ServerLauncher'
    args '3000'
    standardInput = System.in
}

task startJRPCClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.jrpc.client.ClientLauncher'
    args 'localhost', '3000'
    standardInput = System.in
}

task startJsonRpcExample(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.jetbrains.middleware.JsonRpcExample'
}

task startProtobufServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.ktor.server.netty.EngineMain'
}

task startProtobufExample(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.jetbrains.middleware.ProtobufExample'
}